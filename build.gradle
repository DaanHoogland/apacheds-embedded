version projectVersion
group projectGroup

apply plugin: "java-library"
apply plugin: "groovy"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

sourceCompatibility = jdkCompatibilityVersion
targetCompatibility = jdkCompatibilityVersion

buildscript {
    repositories {
        mavenLocal()
        // If using a Maven proxy, put the property settings in
        // ~/.gradle/gradle.properties for default_proxy_url,
        // default_proxy_username and default_proxy_password.
        if (project.hasProperty("default_proxy_url")) {
            maven {
                url project.property("default_proxy_url")
                credentials {
                    username project.property("default_proxy_username")
                    password project.property("default_proxy_password")
                }
            }
        }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}


repositories {
    mavenLocal()
    // If using a Maven proxy, put the property settings in
    // ~/.gradle/gradle.properties for default_proxy_url,
    // default_proxy_username and default_proxy_password.
    if (project.hasProperty("default_proxy_url")) {
        maven {
            url project.property("default_proxy_url")
            credentials {
                username project.property("default_proxy_username")
                password project.property("default_proxy_password")
            }
        }
    }
    jcenter()
    mavenCentral()
}


jar {
    from { ["LICENSE", "NOTICE"] }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    from { ["LICENSE", "NOTICE"] }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    from { ["LICENSE", "NOTICE"] }
}

dependencies {
    /**
     * These dependencies are cobbled together using apacheds-service and
     * apacheds-service-builder POMs as the guide.  Want to stay away from
     * the monolithic JARs of packages like apacheds-all and
     * apacheds-service, which package a bunch of different libraries into
     * one JAR, which does a real good job of breaking dependency management
     * (and Java9+ modularity) in apps that depend on apacheds-embedded.
     */
    def apacheDsVersion = "2.0.0-M24"
    // This is org.apache.directory.api.version from top-level
    // directory-server/pom.xml.
    def apacheDirApiVersion = "1.0.0"
    compile group: "org.apache.directory.api", name: "api-ldap-codec-standalone", version: apacheDirApiVersion
    compile group: "org.apache.directory.api", name: "api-ldap-model", version: apacheDirApiVersion
    compile group: "org.apache.directory.api", name: "api-ldap-schema-data", version: apacheDirApiVersion
    compile group: "org.apache.directory.api", name: "api-util", version: apacheDirApiVersion
    compile group: "org.apache.directory.server", name: "apacheds-core-annotations", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-core-api", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-core", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-i18n", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-interceptors-hash", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-jdbm-partition", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-kerberos-codec", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-ldif-partition", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-protocol-dhcp", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-protocol-dns", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-protocol-kerberos", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-protocol-ldap", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-protocol-ntp", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-protocol-shared", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-server-config", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-xdbm-partition", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-mavibot-partition", version: apacheDsVersion
    compile group: "org.apache.directory.server", name: "apacheds-interceptor-kerberos", version: apacheDsVersion

    compile "commons-io:commons-io:2.6"

    testCompile "org.codehaus.groovy:groovy-all:2.4.15"
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'junit:junit:4.12'
    testCompile "org.slf4j:slf4j-api:1.7.25"
    testRuntime "org.apache.logging.log4j:log4j-core:2.11.1"
    testRuntime "org.apache.logging.log4j:log4j-slf4j-impl:2.11.1"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name projectName
                    description projectDescription
                    url githubWebUrl
                    scm {
                        url githubWebUrl
                        connection "scm:git:${githubWebUrl}.git"
                        developerConnection "scm:git:${githubWebUrl}.git"
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}

if (project.hasProperty('default_bintray_user')) {
    // deploy with: gradle bintrayUpload
    bintray {
        // put in ~/.gradle/gradle.properties
        user = project.property('default_bintray_user')
        key = project.property('default_bintray_api_key')
        publications = ['mavenJava']

        //dryRun = true

        pkg {
            repo = 'maven'
            name = projectName
            desc = projectDescription
            licenses = ['Apache-2.0']
            websiteUrl = githubWebUrl
            vcsUrl = "${githubWebUrl}.git"
            issueTrackerUrl = "${githubWebUrl}/issues"
            githubRepo = githubRepo
            version {
                name = project.version
                desc = "${projectName} v${project.version} - ${projectDescription}"
                released = new Date()
                vcsTag = "v${project.version}"
            }
        }
    }
}
